// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
  output   = "generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User{
  id String @id @unique @default(uuid())

  login String @unique()
  password String

  goals Goal[]
  plans Plan[]
  tokens Auth?
  avatar Avatar?

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Goal{
  id String @id @unique @default(uuid())

  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  title String
  date String
  savedMoney Int @default(0) @map("saved_money")
  allMoney Int @map("all_money")

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("goals")
}

model Plan{
  id String @id @unique @default(uuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  title String

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Auth{
  userLogin String @id @unique @map("user_login")
  user User @relation(fields: [userLogin], references: [login])

  accessToken String @map("access_token")
  refreshToken String @map("refresh_token")
}

model Avatar{
  userLogin String @id @unique @map("user_login")
  user User @relation(fields: [userLogin], references: [login])

  avatarPath String

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")
}